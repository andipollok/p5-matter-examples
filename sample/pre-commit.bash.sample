#!/usr/bin/env bash

# Author: Ron Eros Mandic (@ron-mandic)
# Repository: b-g/p5-matter-examples
# Path: sample/pre-commit.bash.sample
# Last reviewed: 2023-05-29 20:37 CEST (by @ron-mandic)

# ------------------------------------------------------------------------------------------
# A VARIABLES AND FUNCTIONS ----------------------------------------------------------------
# ------------------------------------------------------------------------------------------
# vgl. https://stackoverflow.com/a/28938235
NC='\033[0m'
GREEN='\033[0;32m'
LIGHT_BLUE='\033[1;34m'
YELLOW='\033[0;33m'
RED='\033[0;31m'

LIBRARIES_DIR="./libraries"

success() {
    local message=$1
    echo -e "${GREEN}${message}${NC}"
}
info() {
    local message=$1
    echo -e "${LIGHT_BLUE}${message}${NC}"
}
warning() {
    local message=$1
    echo -e "${YELLOW}${message}${NC}"
}
error() {
    local message=$1
    echo -e "${RED}${message}${NC}"
}

version() {
    local file_path="$1"
    local version

    if [[ -f "$file_path" ]]; then
        version=$(head "$file_path" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")

        if [[ -n "$version" ]]; then
            echo "$version"
        fi
    fi
}

# ------------------------------------------------------------------------------------------
# B INFO -----------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------
info "\nInfo: Shell and script environment"
echo "\$0: $0" # The filename of the current script
echo "\$\$: $$" # The process ID of the current shell
echo "\$SHELL: $SHELL" # The current shell

# ------------------------------------------------------------------------------------------
# C GUARD CLAUSES --------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------
# a Check if the script will be run in a shell other than sh
SH_LOCATION="$(which sh)"
if [ "$SHELL" = "$SH_LOCATION" ]; then
    error "\nThis script is not compatible with the $SH_LOCATION shell. Exiting script ..."

# b Check if there are even any JavaScript files in the ./classes directory
elif [[ -z $(find ./classes -name "*.js" 2>/dev/null) ]]; then
    error "\nThere are no JavaScript files in the ./classes directory"
    error "npx cannout run later without the JavaScript source files (error TS6053)"

# c Check if the root directory is capable of running npm and other Node.js commands
elif [[ ! -f package.json || ! -f package-lock.json ]]; then
    error "\nThere is no package.json or package-lock.json file. They are later required for npm and npx"
    error "Please run 'npm init' first and try again"

# d Check if there are any new changes in the ./classes directory
elif ! [[ $(git status --porcelain ./classes) ]]; then 
    warning "\npre-commit: There are no new changes in the ./classes directory. Keep on coding"
else 
    # ------------------------------------------------------------------------------------------
    # D MAIN PROGRAM ---------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------------
    success "\npre-commit: There are new changes in the ./classes directory! \n"

    # Delete old type declaration files in the @types directory for a rebuild
    if [ -d "@types" ]; then
        rm -r "@types"
    fi

    # 1 ---------------------------------------------
    # see https://stackoverflow.com/a/677212
    if ! command -v npx &> /dev/null; then
        error "npx could not be found. Exiting script ...\n"
        exit 1
    else
        info "1. Create type declaration files in @types ..."
        # bash: ./classes/*.js      Only files in the current directory
        # zsh:  ./classes/**/*.js   Only files in the current directory and subdirectories

        # Premise: The JavaScript files in the ./classes directory already exist since we checked for them earlier in the guard clause (see c)
        # Result: The type declaration files (*.d.ts) will be created in the new ./@types directory
        npx -p typescript tsc ./classes/*.js --declaration --allowJs --emitDeclarationOnly --outDir ./@types
    fi    

    # 2 ---------------------------------------------
    info "2. Create index.d.ts in @types ..."
    # Guard clause #1
    if ! [ -d "./@types" ]; then
        warning "There is no @types directory. Exiting script ...\n"
        exit 1
    fi
    # Guard clause #2
    if [[ -z $(find ./@types -name "*.d.ts" 2>/dev/null) ]]; then
        warning "There are no type declaration files (*.d.ts) in the @types directory. Exiting script ...\n"
        exit 1
    fi

    # Hint: 'cat: ./@types/index.d.ts: input file is output file' only happens if index.d.ts already exists
    cat ./@types/*.d.ts > ./@types/index.d.ts

    # 3 ---------------------------------------------
    # see https://unix.stackexchange.com/a/154067
    info "3. Clean up individual type declaration files ..."
    cd @types

    # ls | grep -xv "index.d.ts" | xargs rm

    # or

    # find . -type f ! -name "*.d.ts" -delete
    find . -type f -name "*.d.ts" ! -name "index.d.ts" -exec rm {} + #-delete

    cd ..

    # 4 ---------------------------------------------
    info "4. Create a new subdirectory called ./@types/classes ..."
    mkdir ./@types/classes
    mv ./@types/index.d.ts ./@types/classes/index.d.ts

    # 5 ---------------------------------------------
    info "5. Install and extract type declaration files for p5.js and matter.js ..."

    if ! command -v npm &> /dev/null; then
        error "npm could not be found. Exiting script ...\n"
        exit 1
    fi

    # matter.js
    if ! [[ -f "$LIBRARIES_DIR/matter.js" ]]; then
        npm --save-dev install @types/matter-js
    else
        FILE_PATH_MATTER_JS=$(find "$LIBRARIES_DIR" -name "matter.js" 2>/dev/null)
        VERSION_MATTER_JS=$(version "$FILE_PATH_MATTER_JS")

        if [[ -z "$VERSION_MATTER_JS" ]]; then
            npm --save-dev install @types/matter-js
        else
            npm --save-dev install @types/matter-js@"$VERSION_MATTER_JS"

            # Only if the latest version is not available yet
            if [ $? -ne 0 ]; then
                warning "\nThere was an error installing the type declaration files for matter.js or the version $VERSION_MATTER_JS simply is not available yet"
                warning "Installing the latest available version instead ..."
                npm --save-dev install @types/matter-js
            fi
        fi
    fi

    # p5.js
    if ! [[ -f "$LIBRARIES_DIR/p5.js" ]]; then
        npm --save-dev install @types/p5
    else
        FILE_PATH_P5_JS=$(find "$LIBRARIES_DIR" -name "p5.js" 2>/dev/null)
        VERSION_P5_JS=$(version "$FILE_PATH_P5_JS")

        if [[ -z "$VERSION_P5_JS" ]]; then
            npm --save-dev install @types/p5
        else
            npm --save-dev install @types/p5@"$VERSION_P5_JS"

            # Only if the latest version is not available yet
            if [ $? -ne 0 ]; then
                warning "\nThere was an error installing the type declaration files for p5.js or the version $VERSION_P5_JS simply is not available yet"
                warning "Installing the latest available version instead ..."
                npm --save-dev install @types/p5
            fi
        fi
    fi

    # Guard clause
    if ! [ -d "node_modules" ]; then
        warning "There is no node_modules folder and thus no @types folder"
        warning "Please make sure that the folder is preserved during the script. Please try again. Exiting script ...\n"
        exit 1
    else
        cd node_modules/@types
    fi

    if [ -d "p5" ]; then
        # Premise: The JavaScript files in the ./classes directory already exist since we checked for them earlier in the guard clause
        # Result: @types/p5 will and can be created along side @types/classes
        # mkdir ../../@types/p5
        cp -r p5 ../../@types/p5
    fi

    if [ -d "matter-js" ]; then
        # Premise: The JavaScript files in the ./classes directory already exist since we checked for them earlier in the guard clause
        # Result: @types/matter-js will and can be created along side @types/classes and @types/p5
        # mkdir ../../@types/matter-js
        cp -r matter-js ../../@types/matter-js
    fi

    cd ../../

    # 6 ---------------------------------------------
    info "\n6. Do you want to delete the node_modules directory? [y/n]"
    # see https://stackoverflow.com/a/1885534
    # /dev/tty -> ensure that the user input is read directly from the terminal rather than from any redirected input stream
    read reply < /dev/tty
    echo
    if [[ $reply =~ ^[Yy]$ ]]; then

        # if node_modules folder exits
        if [ -d "node_modules" ]; then
            rm -rf node_modules
            echo "The ./node_modules directory has been deleted"
        else
            echo "The ./node_modules directory no longer exists. There is no need to delete"
        fi

        warning "Please make sure you re-install the node_modules before running the script again"
    else
        echo "The ./node_modules directory will not be touched"
    fi

    # End ---------------------------------------------
    clear

    # Present a summary of the changes
    info "\nGit: General overview"
    git status -s

    # Add the new type declaration files to the staging area that were not included in the previous commit
    git add @types
fi